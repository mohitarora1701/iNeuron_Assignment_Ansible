Q1.Could you construct a simple playbook to install Nginx on a server?
Ans.---
    - hosts: all
    tasks:
        - name: ensure nginx is at the latest version
        apt: name=nginx state=latest
        become: yes
        - name: start nginx
        service:
            name: nginx
            state: started
        become: yes
        - name: copy the nginx config file and restart nginx
        copy:
            src: /home/foo/static_site.cfg
            dest: /etc/nginx/sites-available/static_site.cfg
        become: yes
        - name: create symlink
        file:
            src: /etc/nginx/sites-available/static_site.cfg
            dest: /etc/nginx/sites-enabled/default
            state: link
        become: yes
        - name: copy the content of the web site
        copy:
            src: /home/foo/static-site-src/
            dest: /home/foo/static-site
        - name: restart nginx
        service:
            name: nginx
            state: restarted
        become: yes



Q2.




Q3.What is the difference between an Ansible role and a playbook role?
Ans.A playbook is a standalone file that Ansible can run that contains all of the information required to set a machine’s state to what you expect.
    A playbook can contain variables, tasks, handlers, roles, and even other playbooks, all in the same file.



Q4. How can I write a multi-task Ansible handler in Ansible?
Ans.handlers:
    - name: restart memcached
      service: name=memcached state=restarted
      listen: "restart web services"
    - name: restart apache
      service: name=apache state=restarted
      listen: "restart web services"

    tasks:
        - name: restart everything
        command: echo "this task will restart the web services"
        notify: "restart web services"



Q5.What are Ansible Vaults and how do you use them?
Ans.Ansible Vault is a mechanism that allows encrypted content to be incorporated transparently into Ansible workflows. A utility called ansible-vault secures confidential data, called secrets, 
    by encrypting it on disk. To integrate these secrets with regular Ansible data, both the ansible and ansible-playbook commands, for executing ad hoc tasks and structured playbook respectively, 
    have support for decrypting vault-encrypted content at runtime.
    - ansible-vault create vault.yml (Creating New Encrypted Files)
    - cat vault.yml
        -output:$ANSIBLE_VAULT;1.1;
                AES25665316332393532313030636134643235316439336133363531303838376235376635373430336333
                3963353630373161356638376361646338353763363434360a363138376163666265336433633664
                30336233323664306434626363643731626536643833336638356661396364313666366231616261
                3764656365313263620a383666383233626665376364323062393462373266663066366536306163
                31643731343666353761633563633634326139396230313734333034653238303166




Q6.How can I use Ansible to create encrypted files?
Ans. ansible-vault encrypt encrypt_me.txt (Creating New Encrypted Files)


Q7.What is Ansible Tower, exactly?
Ans.Ansible Tower (formerly ‘AWX’) is a web-based solution that makes Ansible even more easy to use for IT teams of all kinds. It’s designed to be the hub for all of your automation tasks.
    Tower allows you to control access to who can access what, even allowing sharing of SSH credentials without someone being able to transfer those credentials. Inventory can be graphically managed or 
    synced with a wide variety of cloud sources. It logs all of your jobs, integrates well with LDAP, and has an amazing browsable REST API. Command line tools are available for easy integration with Jenkins 
    as well. Provisioning callbacks provide great support for autoscaling topologies.




Q8.What are the benefits of the Ansible Tower?
Ans. - Ansible Tower allows you to control access to who can access what, even allowing sharing of SSH credentials without someone being able to transfer those credentials. 
     Inventory can be graphically managed or synced with a wide variety of cloud sources.
     - It logs all of your jobs, integrates well with LDAP, and has an amazing browsable REST API. Command line tools are available for easy integration with Jenkins as well. 
     Provisioning callbacks provide great support for auto scaling topologies.



Q9.What is the role of Ansible in the Continuous Delivery pipeline? Explain.
Ans.The purpose of using Ansible in the pipeline flow is to reuse roles and Playbooks for provisioning, leaving Jenkins only as a process orchestrator instead of a shell script executor.
    One common way to use Ansible is by calling it from a continuous integration (CI) system upon a successful application build: The CI asks Ansible to run a playbook that deploys a staging 
    environment with the application. When the stage tests pass, it might then be asked to run a production deployment.



Q10.Using Ansible, how do you build a LAMP stack and deploy a webpage?
Ans.
    - Create our hosts file
        ansible_ssh_user=vagrant ansible_ssh_private_key_file=~/.vagrant.d/insecure_private_key
    - Create our playbook.yml
      ---
      - hosts: all
        roles:
            - apache2
            - mariadb
        
        playbook.yml
        roles/
            <your role>
                tasks
                    main.yml
                files
                    <your files>

    -  Create our Apache role
        roles/
            apache2
                tasks
                    main.yml
                files
                    index.php

    ---
    - name: 1. install Apache
    apt: name=apache2 state=present

    - name: 2. install PHP module for Apache
    apt: name=libapache2-mod-php5 state=present

    - name: 3. start Apache
    service: name=apache2 state=running enabled=yes

    - name: 4. install Hello World PHP script
    copy: src=index.php dest=/var/www/html/index.php mode=0664

    - index.php
    <?php
    echo "Hello World!";

    - Create our MariaDB role
        roles/
        mariadb
            tasks
                main.yml
            files
                db.php
                dump.sql

    - main.yml
        ---
        - name: 1. Install MariaDB server package
        apt: name=mariadb-server state=present

        - name: 2. Start Mysql Service
        service: name=mysql state=started enabled=true

        - name: Install python Mysql package #required for mysql_db tasks
        apt: name=python-mysqldb state=present

        - name: 3. Create a new database
        mysql_db: name=demo state=present collation=utf8_general_ci

        - name: 4. Create a database user
        mysql_user: name=demo password=demo priv=*.*:ALL host=localhost state=present

        - name: 5a. Copy sample data
        copy: src=dump.sql dest=/tmp/dump.sql

        - name: 5b. Insert sample data
        shell: cat /tmp/dump.sql | mysql -u demo -pdemo demo

        - name: 6a. Install MySQL extension for PHP
        apt: name=php5-mysql state=present

        - name: 6b. Restart Apache
        service: name=apache2 state=restarted

        - name: 7. install Hello World PHP script with database
        copy: src=db.php dest=/var/www/html/db.php mode=0664


    - db.php
        <?php
        $connection = new PDO('mysql:host=localhost;dbname=demo', 'demo', 'demo');
        $statement  = $connection->query('SELECT message FROM demo');

        echo $statement->fetchColumn(); 

    -  Run our playbook
        ansible-playbook -i hosts playbook.yml --sudo